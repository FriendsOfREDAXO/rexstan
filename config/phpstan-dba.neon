services:
    # redaxos setQuery etc. APIs support both, prepared and unprepared statements..
    # therefore we need to register them twice, to also cover cases which don't pass parameters.
    -
        class: staabm\PHPStanDba\Rules\SyntaxErrorInPreparedStatementMethodRule
        tags: [phpstan.rules.rule]
        arguments:
            classMethods:
                - 'rex_sql::setQuery'
                - 'rex_sql::setDBQuery'
                - 'rex_sql::getArray'
                - 'rex_sql::getDBArray'

    -
        class: staabm\PHPStanDba\Rules\SyntaxErrorInQueryMethodRule
        tags: [phpstan.rules.rule]
        arguments:
            classMethods:
                - 'rex_sql::setQuery#0'
                - 'rex_sql::setDBQuery#0'
                - 'rex_sql::getArray#0'
                - 'rex_sql::getDBArray#0'
                - 'rex_sql::prepareQuery#0'
                - 'rex_sql::getQueryType#0'

    -
        class: redaxo\phpstan\RexSqlDynamicReturnTypeExtension
        tags:
            - phpstan.broker.dynamicMethodReturnTypeExtension

    -
        class: redaxo\phpstan\RexSqlSetQueryTypeSpecifyingExtension
        tags:
            - phpstan.typeSpecifier.methodTypeSpecifyingExtension

    -
        class: redaxo\phpstan\RexSqlGetValueDynamicReturnTypeExtension
        tags:
            - phpstan.broker.dynamicMethodReturnTypeExtension
    -
        class: redaxo\phpstan\RexSqlGetArrayDynamicReturnTypeExtension
        tags:
            - phpstan.broker.dynamicMethodReturnTypeExtension

    -
        class: redaxo\phpstan\RexSqlGetValueRule
        tags:
            - phpstan.rules.rule

    -
        class: redaxo\phpstan\RexMediaGetValueDynamicReturnTypeExtension
        tags:
            - phpstan.broker.dynamicMethodReturnTypeExtension
    -
        class: redaxo\phpstan\RexArticleGetValueDynamicReturnTypeExtension
        tags:
            - phpstan.broker.dynamicMethodReturnTypeExtension

